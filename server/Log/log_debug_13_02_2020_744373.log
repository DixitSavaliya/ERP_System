socket server started on port 4000
Listening HTTP on port 3000
requested_plain_url ==>    /User/getAuthTokens
required check ------------------------->  false
getAuthTokens login  sql ---------------------> 
	  select 
        um.*, 
        ur.id as user_role_id, 
        ur.name as user_role,
        um.status 
    from user_master as um  
    left join user_role as ur on ur.id = um.user_role_id 
    where BINARY um.username ='mehul@gmail.com' or BINARY um.email_id ='mehul@gmail.com'
redis_obj stored
{ id: 35,
  secret_key: 'bnVsbF9tZWh1bEBnbWFpbC5jb20=',
  username: '',
  user_email: 'mehul@gmail.com',
  access_token: 'bI2b6UmZZ7XodLYx(z6DXFZJTBKVxRuN',
  refresh_token: 'KgRTpOCbmWUInXAX)B3hMxZ6VC0zTQ3q',
  expire_time: '2020-02-13 14:12:37',
  server_time: '2020-02-13 12:35:46',
  updated_at: '2020-02-13 12:35:46',
  user_group: undefined,
  user_group_id: undefined }
expire in =>  5751  seconds
expire in =>  5751  seconds
requested_plain_url ==>    /Application/getAdvertiserAppHitCount
required check ------------------------->  false
getAdvertiserAppHitCount sql 
  select 
                        am.id,
                        am.name,
                        am.icon,
                        am.banner,
                        am.package,
                        (select count(id) from application_hit_count where request_id = am.id) as total_count,
                        (select count(id) from application_hit_count where request_id = am.id and cast(create_date as date) = '2020-02-13') as today_count
                    from application_master as am
                    where am.user_id = '35' 
                    group by am.id
                    order by am.name asc
requested_plain_url ==>    /User/currentUser
required check ------------------------->  false
currentUser sql ------------->  select 
                    um.*,
                    2 as type,
                    null as parent_id,
                    ur.id as user_role_id,
                    ur.name as user_role
                from user_master as um 
                left join user_role as ur on ur.id = um.user_role_id
                where um.id = 35
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /User/getAuthTokens
required check ------------------------->  false
getAuthTokens login  sql ---------------------> 
	  select 
        um.*, 
        ur.id as user_role_id, 
        ur.name as user_role,
        um.status 
    from user_master as um  
    left join user_role as ur on ur.id = um.user_role_id 
    where BINARY um.username ='adNetwork' or BINARY um.email_id ='adNetwork'
redis_obj stored
{ id: 2,
  secret_key: 'Ml9hZG1pbl9udWxsXzE=',
  username: 'adNetwork',
  user_email: 'dixit20051998@gmail.com',
  access_token: '9bRwPYhHLsF1GqLC(JFhKfK0dnowMtpq',
  refresh_token: 'wIWyBkiXCWm8Xt0h{Pk7hb83HOmimuws',
  expire_time: '2020-02-13 13:54:23',
  server_time: '2020-02-13 12:38:38',
  updated_at: '2020-02-13 12:38:38',
  user_group: undefined,
  user_group_id: undefined }
expire in =>  4485  seconds
expire in =>  4485  seconds
requested_plain_url ==>    /Application/getAdvertiserAppHitCount
required check ------------------------->  false
getAdvertiserAppHitCount sql 
  select 
                        am.id,
                        am.name,
                        am.icon,
                        am.banner,
                        am.package,
                        (select count(id) from application_hit_count where request_id = am.id) as total_count,
                        (select count(id) from application_hit_count where request_id = am.id and cast(create_date as date) = '2020-02-13') as today_count
                    from application_master as am
                    where am.user_id = '2' 
                    group by am.id
                    order by am.name asc
requested_plain_url ==>    /User/currentUser
required check ------------------------->  false
currentUser sql ------------->  select 
                    um.*,
                    2 as type,
                    null as parent_id,
                    ur.id as user_role_id,
                    ur.name as user_role
                from user_master as um 
                left join user_role as ur on ur.id = um.user_role_id
                where um.id = 2
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/getUserRole
required check ------------------------->  false
getUserRole sql ===> select ur.* from user_role as ur 
requested_plain_url ==>    /UserRole/getUserRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/registerUserRoleToRight
required check ------------------------->  false
						 
 new_right_updated brodcasted 
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/registerUserRoleToRight
required check ------------------------->  false
						 
 new_right_updated brodcasted 
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
requested_plain_url ==>    /UserRole/getUserRoleToRight
required check ------------------------->  false
